План разработки сервиса

1. Инициализация проекта
	•	Создать базовую структуру проекта (чистая архитектура: cmd, internal/handler, internal/service, internal/repository, config, migrations и т. д.)
	•	Настроить godotenv для работы с конфигами
	•	Создать Dockerfile и docker-compose.yml (PostgreSQL + сервис)

2. Настройка БД (PostgreSQL)
	•	Создать таблицы:
	1.	users (id, username, coins)
	2.	transactions (id, from_user_id, to_user_id, amount, timestamp)
	3.	purchases (id, user_id, item, price, timestamp)
	•	Написать миграции

3. Аутентификация (JWT)
	•	Реализовать регистрацию и логин (автоматическое создание пользователя)
	•	Настроить middleware для проверки токена

4. API обработки монет
	•	Получение информации (/api/info)
	•	Баланс
	•	История транзакций (полученные/отправленные монеты)
	•	Купленные товары
	•	Перевод монет (/api/sendCoin)
	•	Проверка, хватает ли монет
	•	Сохранение транзакции
	•	Покупка мерча (/api/buy/{item})
	•	Проверка баланса
	•	Вычитание монет
	•	Сохранение покупки

5. Логирование действий
	•	Вести логи в таблице transactions (переводы) и purchases (покупки)

6. Тестирование
	•	Юнит-тесты (покрытие бизнес-логики > 40%)
	•	Интеграционные тесты:
	•	Покупка товара
	•	Перевод монет

avito-shop/
│── cmd/                  # Входная точка приложения
│   ├── main.go
│── config/               # Конфигурации (чтение из .env)
│   ├── config.go
│── internal/             # Вся бизнес-логика сервиса
│   ├── handler/          # HTTP-обработчики (Gin)
│   ├── service/          # Бизнес-логика
│   ├── repository/       # Работа с БД (GORM / SQL)
│   ├── models/           # Определения структур данных
│── migrations/           # SQL-миграции
│── pkg/                  # Пакеты (например, middleware, utils)
│── .env                  # Конфиг (переменные окружения)
│── Dockerfile            # Образ для Docker
│── docker-compose.yml    # Запуск сервисов в контейнерах
│── go.mod                # Go-модуль
│── go.sum                # Зависимости
│── README.md             # Документация
│── tests/                # Интеграционные и E2E тесты